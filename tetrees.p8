pico-8 cartridge // http://www.pico-8.com
version 43
__lua__
i=1 o=2 t=3 l=4 s=5 j=6 z=7

function _init()
 names = { i,o,t,l,s,j,z }
 lines = 0
 level = 0

 shapes  = init_shapes()
 sprites = init_sprites()
 droplag = init_droplag()

 bag = {}           -- pieces
 nxt = rnd(names)   -- next
 …  = spawn()      -- piece(q)

 poke(0x5f5d, 4)  -- "das"

 tick = 0
 game = 'going'
end

function spawn()
 local name = nxt
 local spin, y, x = 0, 1, 4

 if #bag == 0 then -- bag empty
  bag = pack(unpack(names))

  -- add a few extra random
  for _ = 1,3 do
   add(bag, rnd(names))
  end
 end

 nxt = del(bag, rnd(bag))

 for █ in all(shapes[name][spin]) do
  if ▒[y + █.y][x + █.x] != 0 then
   game = 'over'
  end
 end

 return {
  x = x,
  y = y,
  name = name,
  spin = spin
 }
end

function mv(roll, pitch, yaw)
 local spin = ….spin + roll
 local y    = ….y    + pitch
 local x    = ….x    + yaw

 if (spin < 0) spin = 9
 if (spin > 9) spin = 0

 for █ in all(
  shapes[….name][spin]) do

  if █.x+x < 1  or
     █.x+x > 10 or
     ▒[█.y+y][█.x+x] != 0 then

   return
  elseif █.y+y == #▒ or
   ▒[█.y+y+1][█.x+x] != 0 then

   return lock(spin, x, y)
  end
 end

 if (….spin != spin) sfx(0)
 if (….x    != x   ) sfx(3)

 ….spin = spin
 ….x = x
 ….y = y

 return true
end

function lock(spin, x, y)
 for █ in all(
  shapes[….name][spin]) do

  ▒[█.y+y][█.x+x] = ….name
 end

 local cleared = 0

 for y = #▒, 1, -1 do
  if 0 == count(▒[y], 0) then
   deli(▒, y)
   cleared += 1
  end
 end

 for _ = 1, cleared do
  add(▒,
   { 0,0,0,0,0,0,0,0,0,0 }, 1)
 end

 lines += cleared

 if cleared > 0 then
  uplevel(flr(lines/10))
 elseif cleared == 0 then
  sfx(1)
 else
  sfx(2)
 end

 … = spawn()
end

function uplevel(new)
 if (level != new) then
  level = new
  droplag = init_droplag()
  sprites = init_sprites()
 end
end

function init_droplag()
 if level <= 8 then
  return 48 - (level * 5)
 end

 if (level == 09) return 6
 if (level <= 12) return 5
 if (level <= 15) return 4
 if (level <= 18) return 3
 if (level <= 28) return 2

 return 1
end

function init_sprites()
 local colors = {
  [0] = { [05] = 131,
          [13] = 140, },

  [1] = { [02] = 130,
          [03] = 131,
          [10] = 134,
          [11] = 136,
          [12] = 137, },

  [2] = { [03] = 139,
          [04] = 135,
          [11] = 138,
          [13] = 140, },

  [3] = { [02] = 132,
          [05] = 134,
          [08] = 136,
          [09] = 139,
          [10] = 131,
          [13] = 140, },

  [4] = { [02] = 130,
          [04] = 131,
          [09] = 139,
          [12] = 138,
          [15] = 135, },

  [5] = { [02] = 132,
          [03] = 137,
          [05] = 134,
          [14] = 135, },

  [6] = { [05] = 134,
          [09] = 136,
          [10] = 130,
          [11] = 140, },

  [7] = { [02] = 130,
          [03] = 134,
          [12] = 135,
          [14] = 132, },

  [8] = { [09] = 130,
          [10] = 135,
          [11] = 136, }
 }

 local palette = level % 9
 local spr_start = (palette * 4)

 pal()
 pal({ [0] = 1, 129 }, 1)
 pal(colors[palette],  1)

 return {
  [i] = 1 + spr_start,
  [o] = 2 + spr_start,
  [t] = 2 + spr_start,
  [l] = 3 + spr_start,
  [s] = 3 + spr_start,
  [j] = 4 + spr_start,
  [z] = 4 + spr_start
 }
end

function _draw()
 local px  = 6 -- sprite width

 ▒.top    = 2
 ▒.left   = 32
 ▒.width  = px * #▒[1] + 2
 ▒.height = px * #▒    + 2

 cls()
 map()

 h1("\^unext", 104, 100)
 for █ in
  all(shapes[nxt][0]) do

  local x = 102 + (█.x * px)
  local y = 112 + (█.y * px)

  if (nxt == i) x -= 2
  if (nxt == o) x += 4

  spr(0, x+1, y+1)
  spr(sprites[nxt], x, y)
 end


 h1("level", 102, 44)
 if level > 9 then
  h1("\^w\^t " .. level, 96, 52)
 else
  h1("\^w\^t " .. level, 100, 52)
 end

 for y = 1, #▒ do
  for x = 1, #▒[y] do
   spr(sprites[▒[y][x]],
    ▒.left + 1 + ((x-1) * px),
    ▒.top  + 1 + ((y-1) * px))
  end
 end

 for █ in all(
  shapes[….name][….spin]) do

  spr(
   sprites[….name],
   ▒.left +1 +((….x +█.x -1) *px),
   ▒.top  +1 +((….y +█.y -1) *px)
  )
 end

 if game == 'over' then
  rrectfill(40,36,45,15,2,7)
  rrect(42,38,41,11,2,6)
  ?"game over", 45, 41, 0
 end
end

function h1(str, x, y)
 ? str, x+1, y,   1
 ? str, x,   y+1, 1
 ? str, x,   y,   7
end

function _update60()
 if (game == 'over') return

 local roll, pitch, yaw = 0,0,0

 if (btnp(🅾️)) roll = -3
 if (btnp(❎)) roll =  3

 if (btnp(⬅️)) yaw = -1
 if (btnp(➡️)) yaw =  1

 if btn(⬇️) then
  if (0 == tick % 4) pitch = 1
 elseif tick >= droplag then
  pitch = 1
  tick  = 0
 end

 mv(roll, pitch, yaw)

 tick += 1
end

▒ = {
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 },
 { 0,0,0,0,0,0,0,0,0,0 }
}

function init_shapes()
 local tetrominos = {
  [t] = {
   [0] = { { ∧,█    },
           { █,█,█ } },

   [3] = { { ∧,█    },
           { ∧,█,█ },
           { ∧,█    } },

   [6] = { { ∧,∧,∧ },
           { █,█,█ },
           { ∧,█    } },

   [9] = { { ∧,█ },
           { █,█ },
           { ∧,█ } }
  },

  [j] = {
   [0] = { { █       },
           { █,█,█ } },

   [3] = { { ∧,█,█ },
           { ∧,█    },
           { ∧,█    } },

   [6] = { { ∧,∧,∧ },
           { █,█,█ },
           { ∧,∧,█ } },

   [9] = { { ∧,█ },
           { ∧,█ },
           { █,█ } }
  },

  [z] = {
   [0] = { { █,█    },
           { ∧,█,█ } },

   [3] = { { ∧,∧,█ },
           { ∧,█,█ },
           { ∧,█    } }
  },

  [o] = {
   [0] = { { █,█ },
           { █,█ } }
  },

  [s] = {
   [0] = { { ∧,█,█ },
           { █,█    } },

   [3] = { { █,∧ },
           { █,█ },
           { ∧,█ } }
  },

  [l] = {
   [0] = { { ∧,∧,█ },
           { █,█,█ } },

   [3] = { { ∧,█    },
           { ∧,█    },
           { ∧,█,█ } },

   [6] = { { ∧,∧,∧ },
           { █,█,█ },
           { █       } },

   [9] = { { █,█ },
           { ∧,█ },
           { ∧,█ } }
  },

  [i] = {
   [0] = { { █,█,█,█ } },

   [3] = { { ∧,█ },
           { ∧,█ },
           { ∧,█ },
           { ∧,█ } },
  }
 }

 local shapes = {}
 for n in all(names) do
  shapes[n] = shapes[n] or {}

  local shp = tetrominos[n]
  shp[3] = shp[3] or shp[0]
  shp[6] = shp[6] or shp[0]
  shp[9] = shp[9] or shp[3]

  for spin in all({0,3,6,9}) do
   local rows = shp[spin]

   shapes[n][spin] =
    shapes[n][spin] or {}

   for y, row in pairs(rows) do
    for x, ch in pairs(row) do
     if ch == █ then
      add(shapes[n][spin], {
       y = y-1,
       x = x-1
      })
     end
    end
   end
  end
 end

 return shapes
end

__gfx__
11111100888882009999940033333500ddddd50033333200ddddd200ccccc400bbbbb200bbbbb300cccccd00aaaaa900eeeee80044444200ddddda0033333a00
1111110087fe820097af940037ab3500d76cd50036a53200d76ad200c7f9c400b7e8b200b74ab300c7f6cd00a74fa900e74fe80047f54200d76cda0037b93a00
111111008fe882009af994003ab33500d6cdd5003a533200d6add200cf9cc400be8bb200b4abb300cf6ccd00a4faa900e4fee8004f544200d6cdda003b933a00
110111008e8882009f9994003b333500dcddd50035333200daddd200c9ccc400b8bbb200babbb300c6cccd00afaaa900efeee80045444200dcddda0039333a00
11111100888882009999940033333500ddddd50033333200ddddd200ccccc400bbbbb200bbbbb300cccccd00aaaaa900eeeee80044444200ddddda0033333a00
11111100222222004444440055555500555555002222220022222200444444002222220033333300dddddd00999999008888880022222200aaaaaa00aaaaaa00
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8888820044444200bbbbb30033333400ccccc900444442003333320099999400aaaaa90022222a00bbbbba00ddddda00cccccb009999940033333e0044444e00
87fe820047654200b7fcb30037b93400c7fac90047f5420037f9320097ef9400a7efa90027892a00b76cba00d765da00c7f6cb0097af940037c63e0047f34e00
8fe8820046544200bfcbb3003b933400cfacc9004f5442003f9332009ef99400aefaa90028922a00b6cbba00d65dda00cf6ccb009af994003c633e004f344e00
8e88820045444200bcbbb30039333400caccc90045444200393332009f999400afaaa90029222a00bcbbba00d5ddda00c6cccb009f99940036333e0043444e00
8888820044444200bbbbb30033333400ccccc900444442003333320099999400aaaaa90022222a00bbbbba00ddddda00cccccb009999940033333e0044444e00
222222002222220033333300444444009999990022222200222222004444440099999900aaaaaa00aaaaaa00aaaaaa00bbbbbb0044444400eeeeee00eeeeee00
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5555520022222900bbbbb20088888200eeeeeb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
57635200278b2900b7e8b20087fe8200e7afeb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5635520028b22900be8bb2008fe88200eafeeb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
535552002b222900b8bbb2008e888200efeeeb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5555520022222900bbbbb20088888200eeeeeb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222200999999002222220022222200bbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000002b0000000000002c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000002b0000000000002c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000002b0000000000002c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000002b0000000000002c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000002b0000000000002c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000282929292929292a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
00010000017500275003750047500575007750097500c7501075013750177501c7502175025750297502b7502c7502e7502c7502475021750187500c75009750097500b75011750177501c750247502b75030750
00000000086700a6700b6700c6700c6700c6600a66008650066500565004650046400464005640066400764006640046400463005630046200061000600096000760006600056000360002600016000160000600
0001000019750197501d750217502575029750307502c750247501c750187501575018750207502a7502f7502d7502a75026750227502275024750297502b7502b7502975026750227501e7501a7501775014750
00010000001003c150001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100
000100000105005050090500e05012050130501705000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
